plugins {
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenLocal()

    maven {
        name 'papermc'
        url 'https://repo.papermc.io/repository/maven-public/'
    }

    maven {
        url = uri 'https://repo.maven.apache.org/maven2/'
    }
    mavenCentral()
}

dependencies {
    compileOnly project(':database-proxy')
    compileOnly project(':database-api')

    compileOnly project(':channel-proxy')
    compileOnly project(':channel-api')

    implementation project(':library-network')
    implementation project(':library-extension')
    implementation project(':library-basic')

    annotationProcessor project.velocity
    compileOnly project.velocity

    compileOnly 'commons-io:commons-io:2.11.0'
    compileOnly project.freemarker
}

group = project.group
version = '1.0-SNAPSHOT'
archivesBaseName = 'basic-proxy'
java.sourceCompatibility = 1.17
java.targetCompatibility = 1.17

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task buildFatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    baseName = archivesBaseName
    classifier = "all"
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

jar.finalizedBy(buildFatJar)

task deleteOldPluginJar(type: Delete) {
    delete fileTree(dir: "${project.plugins_dir}", include: "**/${archivesBaseName}-*.jar")
}

task copyJarToPlugins(type: Copy) {
    from "build/libs/" + archivesBaseName + "-" + version + "-all" + ".jar"
    into project.plugins_dir
}

copyJarToPlugins.dependsOn(deleteOldPluginJar)
copyJarToPlugins.dependsOn(buildFatJar)
jar.finalizedBy(copyJarToPlugins)

task gitPush(type: Exec) {
    description('Pushes to ' + project.git_url)
    commandLine('git', 'push', 'origin', 'master')
}

task gitPull(type: Exec) {
    description('Pushes to ' + project.git_url)
    commandLine('git', 'pull', 'origin', 'master')
}
